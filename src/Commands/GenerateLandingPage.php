<?php

namespace Mlab\LandingPageGenerator\Commands;

require 'vendor/autoload.php';

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Artisan;

class GenerateLandingPage extends Command
{
    protected $signature = 'generate:LandingPage';
    protected $description = 'Generate a landing page structure';
    protected $stubsDirectory = 'stubs';
    protected $stubTemplates = [
        'mlab-menu.php.stub' => [
            '<?php',
            '',
            'return [',
            '    "menu" => [',
            '        ["url" => "/", "label" => "Home"],',
            '        ["url" => "/login", "label" => "Login"],',
            '    ],',
            '];',
        ],

        'landing.blade.php.stub' => [
            '@extends(\'layouts.app\')',
            '',
            '@section(\'content\')',
            '    <div id="content">',
            '        <img src="https://source.unsplash.com/random/1920x1080/?img=1" alt="landing-asset">',
            '        <h1>Welcome to {{ config(\'app.name\') }}</h1>',
            '        <p>This page is fully generated by M-Lab Generator.</p>',
            '    </div>',
            '@endsection',
        ],

        'app.blade.php.stub' => [
            '<!DOCTYPE html>',
            '<html lang="en">',
            '<head>',
            '    <meta charset="UTF-8">',
            '    <meta name="viewport" content="width=device-width, initial-scale=1.0">',
            '    <meta http-equiv="X-UA-Compatible" content="ie=edge">',
            '    <title>Landing | {{ config(\'app.name\') }}</title>',
            '',
            '    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">',
            '    <link rel="stylesheet" href="{{ asset(\'css/main.css\') }}">',
            '</head>',
            '<body>',
            '    <x-navbar />',
            '',
            '    @yield(\'content\')',
            '',
            '    <x-footer />',
            '    ',
            '    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>',
            '    <script src="{{ asset(\'js/main.js\') }}"></script>',
            '</body>',
            '</html>',
        ],

        'MLandingServiceProvider.php.stub' => [
            '<?php',
            '',
            'namespace App\Providers;',
            '',
            'use Illuminate\Support\ServiceProvider;',
            '',
            'class MLandingServiceProvider extends ServiceProvider',
            '{',
            '    public function register()',
            '    {',
            '        $this->publishes([',
            '            __DIR__.\'/../../resources/views\' => resource_path(\'views\'),',
            '            __DIR__.\'/../../resources/stubs\' => resource_path(\'stubs\'),',
            '            __DIR__.\'/../../config/mlab-menu.php\' => config_path(\'mlab-menu.php\'),',
            '        ], \'mlab-views\');',
            '',
            '        $this->publishes([',
            '            __DIR__.\'/../../resources/views/layouts\' => resource_path(\'views/layouts\'),',
            '        ], \'mlab-layouts\');',
            '',
            '        $this->publishes([',
            '            __DIR__.\'/../../config/mlab-menu.php\' => config_path(\'mlab-menu.php\'),',
            '        ], \'mlab-menu-config\');',
            '    }',
            '}',
        ],

        'LandingController.php.stub' => [
            '<?php',
            '',
            'namespace App\Http\Controllers;',
            '',
            'use Illuminate\Http\Request;',
            '',
            'class LandingController extends Controller',
            '{',
            '    public function __invoke(Request $request)',
            '    {',
            '        return view(\'landing\');',
            '    }',
            '}',
        ],

        'main.css.stub' => [
            '/* Navbar Styling */',
            '.navbar {',
            '    background-color: transparent !important;',
            '    position: absolute;',
            '    width: 100%;',
            '    z-index: 1000;',
            '}',
            '',
            '.navbar-brand {',
            '    margin-right: auto;',
            '}',
            '',
            '.navbar-nav {',
            '    margin: auto;',
            '}',
            '',
            '.navbar-nav .nav-item {',
            '    margin-right: 10px;',
            '}',
            '',
            '/* Content Styling */',
            '#content {',
            '    position: relative;',
            '    height: calc(100vh - 56px); /* 56px adalah tinggi navbar, sesuaikan jika berbeda */',
            '    display: flex;',
            '    align-items: center;',
            '    justify-content: center;',
            '    text-align: center;',
            '    overflow: hidden; /* Hindari scroll ke bawah */',
            '}',
            '',
            '#content img {',
            '    object-fit: cover;',
            '    width: 100%;',
            '    height: 100%;',
            '}',
            '',
            '#content h1, #content p {',
            '    position: absolute;',
            '    color: #fff;',
            '    z-index: 1;',
            '}',
            '',
            '#content h1 {',
            '    font-size: 3em;',
            '    top: 40%;',
            '}',
            '',
            '#content p {',
            '    font-size: 1.5em;',
            '    top: 60%;',
            '}',
            '',
            '/* Footer Styling */',
            'footer {',
            '    background-color: #222;',
            '    color: #fff;',
            '    text-align: center;',
            '    padding: 10px;',
            '}',
        ],

        'main.js.stub' => [
            '// Your JavaScript code here',
        ],

        'navbar.blade.php.stub' => [
            '<!-- Navbar Component -->',
            '<nav class="navbar navbar-expand-lg navbar-light bg-light">',
            ' <div class="container-fluid">',
            ' <a class="navbar-brand" href="{{ url(\'/\') }}"><span class="m-blue">M</span>-Lab</a>',
            ' <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">',
            ' <span class="navbar-toggler-icon"></span>',
            ' </button>',
            ' <div class="collapse navbar-collapse justify-content-center" id="navbarNav">',
            ' <ul class="navbar-nav">',
            ' <li class="nav-item">',
            ' <a class="nav-link" href="{{ url(\'/\') }}">Home</a>',
            ' </li>',
            ' </ul>',
            ' </div>',
            ' <div class="navbar-nav ml-auto">',
            ' <a class="nav-item nav-link" href="{{ url(\'/login\') }}">Login</a>',
            ' </div>',
            ' </div>',
            '</nav>',
        ],

        'footer.blade.php.stub' => [
            '<!-- Footer Component -->',
            '<footer class="bg-dark text-white text-center py-3">',
            ' Copyright Â© <i class="bi bi-copyright"></i> {{ date("Y") }}. Developed by M-Lab.',
            '</footer>',
        ],

        'web.php.stub' => [
            '<?php',
            '',
            'use Illuminate\Support\Facades\Route;',
            'use App\Http\Controllers\LandingController;',  // Sesuaikan dengan namespace controller yang digunakan

            'Route::get(\'/\', [',
            '    \'uses\' => LandingController::class . \'@__invoke\',',
            '    \'as\' => \'landing\',',
            ']);',
        ],

    ];

    public function handle()
    {
        $this->info("Generating Landing Page...");

        // 1. Create Navbar component
        Artisan::call('make:component', ['name' => 'Navbar']);

        // 2. Create Footer component
        Artisan::call('make:component', ['name' => 'Footer']);

        // 3. Generate file stubs, including MLandingServiceProvider
        $this->generateStubs();

        // 4. Generate config from stubs
        $this->publishFile('mlab-menu.php.stub', 'config');

        // 5. Generate layouts.app from stubs
        $this->publishFile('app.blade.php.stub', 'resources/views/layouts/');

        // 6. Generate landing from stubs
        $this->publishFile('landing.blade.php.stub', 'resources/views/');

        // 8. Generate Navbar Component from stubs
        $this->publishFile('navbar.blade.php.stub', 'resources/views/components/');

        // 9. Generate Footer Component from stubs
        $this->publishFile('footer.blade.php.stub', 'resources/views/components/');

        // 10. Generate asset main.css from stubs
        $this->publishFile('main.css.stub', 'public/css/');

        // 11. Generate asset main.js from stubs
        $this->publishFile('main.js.stub', 'public/js/');

        // 12. Generate LandingController from stubs
        $this->publishFile('LandingController.php.stub', 'app/Http/Controllers/');

        // 13. Generate MLandingServiceProvider
        $this->publishFile('MLandingServiceProvider.php.stub', 'app/Providers/');

        // 14. Register MLandingServiceProvider to config/app.php
        // $this->registerMLandingServiceProvider();

        // // 15. Change main route to landing
        $this->publishFile('web.php.stub', 'routes/');

        $this->info("Landing Page generated successfully!");
    }

    protected function generateStubs()
    {
        $stubsPath = base_path('stubs');

        // Initialize overwrite options
        $overwriteAll = false;
        $noToAll = false;

        // Iterate through each stub template and generate the file
        foreach ($this->stubTemplates as $filename => $content) {
            // Combine stubsPath with the filename to form the destination path
            $filePath = $stubsPath . '/' . $filename;

            // Check if the file already exists
            if (File::exists($filePath)) {
                // Check overwrite options
                if (!$overwriteAll && !$noToAll) {
                    // Ask for confirmation to overwrite
                    $action = $this->choice(
                        "File $filename already exists. What do you want to do?",
                        ['Overwrite', 'Skip', 'Overwrite All', 'No to All'],
                        0
                    );

                    // Process the chosen action
                    switch ($action) {
                        case 'Skip':
                            // If Skip is chosen, continue to the next file
                            $this->info("Skipped existing file: $filename");
                            continue 2; // Continue the outer loop
                        case 'Overwrite All':
                            // If Overwrite All is chosen, set the flag to overwrite all remaining files
                            $overwriteAll = true;
                            break;
                        case 'No to All':
                            // If No to All is chosen, set the flag to skip all remaining files
                            $noToAll = true;
                            $this->info("Skipped existing file: $filename (No to All)");
                            continue 2; // Continue the outer loop
                    }
                } elseif ($noToAll) {
                    // Skip if No to All is chosen
                    $this->info("Skipped existing file: $filename (No to All)");
                    continue;
                }
            }

            // Create the directory if it doesn't exist
            File::makeDirectory(dirname($filePath), 0755, true, true);

            // Write the content to the file
            File::put($filePath, implode(PHP_EOL, $content));
            $this->info("Stub file generated: $filePath");
        }


    }

    protected function publishFile($sourceFilename, $destinationFolder)
    {
        $stubsPath = base_path('stubs');
        $sourcePath = $stubsPath . '/' . $sourceFilename;
        $destinationPath = base_path($destinationFolder) . DIRECTORY_SEPARATOR . str_replace('.stub', '', $sourceFilename);

        // Create the directory if it doesn't exist
        File::makeDirectory(dirname($destinationPath), 0755, true, true);

        // Copy the content to the destination file
        File::put($destinationPath, File::get($sourcePath));

        $this->info("Published: $sourceFilename to $destinationPath");
    }

}
